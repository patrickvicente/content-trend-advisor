{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.8", "generated_at": "2025-08-14T13:28:34.992160Z", "invocation_id": "4e48f5d8-798f-4b85-988d-0f486f8e5150", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-14T13:28:33.998827Z", "completed_at": "2025-08-14T13:28:34.014691Z"}, {"name": "execute", "started_at": "2025-08-14T13:28:34.018440Z", "completed_at": "2025-08-14T13:28:34.158059Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16057324409484863, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.content_trend_advisor.stg_youtube", "compiled": true, "compiled_code": "WITH src AS (\n  SELECT \n    external_id AS video_id,\n    fetched_at,\n    payload\n  FROM \"contentdb\".\"public\".\"raw_content\"\n  WHERE source = 'youtube'\n), \n\nclean AS (\n  SELECT\n    video_id,\n\n    /* Titles and descriptions: prefer localized when present */\n    COALESCE(payload->'snippet'->'localized'->>'title', payload->'snippet'->>'title') AS title,\n    LEFT(COALESCE(payload->'snippet'->'localized'->>'description', payload->'snippet'->>'description', ''), 1000) AS description,\n\n    /* Channel and timing info */\n    payload->'snippet'->>'channelId' AS channel_id,\n    payload->'snippet'->>'channelTitle' AS channel_title,\n    (payload->'snippet'->>'publishedAt')::timestamptz AS published_at,\n\n    /* Category and language (note: YouTube uses camelCase keys) */\n    payload->'snippet'->>'categoryId' AS category_id,\n    payload->'snippet'->>'defaultAudioLanguage' AS default_audio_language,\n    CASE\n      WHEN payload->'snippet'->>'defaultAudioLanguage' IS NULL THEN true\n      WHEN lower(payload->'snippet'->>'defaultAudioLanguage') = 'zxx' THEN true\n      WHEN lower(payload->'snippet'->>'defaultAudioLanguage') LIKE 'en%' THEN true\n      ELSE false\n    END AS audio_language_is_english,\n\n    /* Core metrics from statistics (->> needs quoted keys) */\n    COALESCE((payload->'statistics'->>'viewCount')::bigint, 0) AS view_count,\n    COALESCE((payload->'statistics'->>'likeCount')::bigint, 0) AS like_count,\n    COALESCE((payload->'statistics'->>'commentCount')::bigint, 0) AS comment_count,\n\n    /* Duration as seconds from ISO8601 duration */\n    CASE\n      WHEN payload->'contentDetails'->>'duration' IS NOT NULL\n        THEN \n  (\n    COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[1], '0')::int * 3600\n  + COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[2], '0')::int * 60\n  + COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[3], '0')::int\n  )\n\n      ELSE NULL\n    END AS duration_seconds,\n\n    /* Tags, topics, categories */\n    \n  COALESCE(\n    ARRAY(\n      SELECT jsonb_array_elements_text(payload->'snippet'->'tags')\n    ),\n    ARRAY[]::text[]\n  )\n AS tags,\n\n    /* _filter_metadata.detected_topics is an array; use -> (JSONB) not ->> (text) */\n    COALESCE(\n      ARRAY(SELECT jsonb_array_elements_text(payload->'_filter_metadata'->'detected_topics')),\n      ARRAY[]::text[]\n    ) AS detected_topics,\n\n    payload->'_filter_metadata'->>'detected_language' AS detected_language,\n    payload->'_filter_metadata'->>'category_name' AS category_name,\n\n    /* topicDetails.topicCategories is an array of URLs */\n    COALESCE(\n      ARRAY(SELECT jsonb_array_elements_text(payload->'topicDetails'->'topicCategories')),\n      ARRAY[]::text[]\n    ) AS topic_categories,\n\n    /* Derived metrics */\n    \n  CASE\n    WHEN (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric > 0\n      THEN ((COALESCE(COALESCE((payload->'statistics'->>'likeCount')::bigint, 0), 0))::numeric + (COALESCE(COALESCE((payload->'statistics'->>'commentCount')::bigint, 0), 0))::numeric) / (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric\n    ELSE 0::numeric\n  END\n AS engagement_ratio_raw,\n    /* Keep a percentage for readability, but derived from the raw ratio */\n    ROUND((\n      \n  CASE\n    WHEN (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric > 0\n      THEN ((COALESCE(COALESCE((payload->'statistics'->>'likeCount')::bigint, 0), 0))::numeric + (COALESCE(COALESCE((payload->'statistics'->>'commentCount')::bigint, 0), 0))::numeric) / (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric\n    ELSE 0::numeric\n  END\n * 100::numeric\n    ), 2) AS engagement_rate,\n    DATE_TRUNC('day', fetched_at) AS fetched_date,\n    EXTRACT(DAY FROM (NOW() - (payload->'snippet'->>'publishedAt')::timestamptz)) AS days_since_published,\n\n    /* Channel enrichment from ETL (if present) */\n    (payload->'_channel_metadata'->>'subscriberCount')::bigint               AS channel_subscriber_count,\n    (payload->'_channel_metadata'->>'hiddenSubscriberCount')::boolean         AS channel_hidden_subscribers,\n    (payload->'_channel_metadata'->>'videoCount')::bigint                     AS channel_video_count,\n\n    /* Trending-source flag (if captured during ingestion) */\n    COALESCE((payload->'_source_flags'->>'youtube_trending')::boolean, false) AS yt_trending_seen\n\n  FROM src\n)\n\nSELECT * FROM clean", "relation_name": "\"contentdb\".\"public_staging\".\"stg_youtube\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-14T13:28:34.161367Z", "completed_at": "2025-08-14T13:28:34.163922Z"}, {"name": "execute", "started_at": "2025-08-14T13:28:34.164275Z", "completed_at": "2025-08-14T13:28:34.966947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8071660995483398, "adapter_response": {"_message": "SELECT 4208", "code": "SELECT", "rows_affected": 4208}, "message": "SELECT 4208", "failures": null, "unique_id": "model.content_trend_advisor.features_content_engagement", "compiled": true, "compiled_code": "with yt as (\n    select * from \"contentdb\".\"public_staging\".\"stg_youtube\"\n),\n\nenriched AS (\n  SELECT\n    video_id,\n    title,\n    description,\n    channel_id,\n    channel_title,\n    published_at,\n    category_id,\n    default_audio_language,\n    tags,\n    topic_categories,\n    detected_topics,\n    detected_language,\n    category_name,\n    view_count,\n    like_count,\n    comment_count,\n    engagement_rate,\n    engagement_ratio_raw,\n    duration_seconds,\n    days_since_published,\n    channel_subscriber_count,\n    yt_trending_seen,\n\n    /* Simple feature engineering */\n    char_length(title)                                        AS title_len,\n    CASE WHEN title ~ '\\\\d' THEN true ELSE false END           AS title_has_numbers,\n    EXTRACT(HOUR FROM published_at)                           AS hour_of_day,\n    EXTRACT(DOW FROM published_at)                            AS day_of_week,\n\n    CASE\n      WHEN duration_seconds IS NULL THEN 'unknown'\n      WHEN duration_seconds < 60 THEN 'short'\n      WHEN duration_seconds < 300 THEN 'medium'\n      WHEN duration_seconds < 900 THEN 'long'\n      ELSE 'very_long'\n    END                                                       AS content_length_bucket,\n\n    CASE\n      WHEN engagement_ratio_raw >= 0.10 THEN 'high'\n      WHEN engagement_ratio_raw >= 0.05 THEN 'medium'\n      WHEN engagement_ratio_raw >= 0.01 THEN 'low'\n      ELSE 'very_low'\n    END                                                       AS engagement_tier,\n\n    /* Age and velocity */\n    GREATEST(EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0, 0.0)  AS age_hours,\n    GREATEST(EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0, 6.0)  AS age_hours_capped,\n    CASE\n      WHEN EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0 < 24  THEN '0_24h'\n      WHEN EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0 < 72  THEN '24_72h'\n      WHEN EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0 < 168 THEN '3_7d'\n      ELSE '7d_plus'\n    END                                                       AS age_bucket,\n    (view_count::numeric / NULLIF(GREATEST(EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0, 6.0), 0))\n                                                              AS views_per_hour,\n    CASE WHEN channel_subscriber_count IS NOT NULL AND channel_subscriber_count > 0\n         THEN (view_count::numeric / NULLIF(GREATEST(EXTRACT(EPOCH FROM (NOW() - published_at)) / 3600.0, 6.0), 0))\n              / (channel_subscriber_count / 1000.0)\n         ELSE NULL\n    END                                                       AS views_per_hour_per_1k_subs\n\n  FROM yt\n),\n\nscored AS (\n  SELECT\n    e.*,\n    percent_rank() OVER (PARTITION BY e.category_id, e.age_bucket ORDER BY e.views_per_hour) AS vph_pct_in_category,\n    percent_rank() OVER (PARTITION BY e.channel_id,  e.age_bucket ORDER BY e.views_per_hour) AS vph_pct_in_channel,\n\n    CASE\n      WHEN (\n        (percent_rank() OVER (PARTITION BY e.category_id, e.age_bucket ORDER BY e.views_per_hour) >= 0.90\n         OR percent_rank() OVER (PARTITION BY e.channel_id,  e.age_bucket ORDER BY e.views_per_hour) >= 0.95)\n        AND e.engagement_ratio_raw >= 0.01\n        AND e.views_per_hour >= CASE e.age_bucket\n                                  WHEN '0_24h'  THEN 200\n                                  WHEN '24_72h' THEN 100\n                                  WHEN '3_7d'   THEN 50\n                                  ELSE 25\n                                END\n        AND e.view_count >= 3000\n      ) THEN true ELSE false\n    END                                                       AS is_trending,\n\n    CASE\n      WHEN yt_trending_seen THEN 'yt_most_popular'\n      WHEN engagement_ratio_raw < 0.01 THEN 'low_engagement'\n      WHEN view_count < 3000 THEN 'low_total_views'\n      ELSE 'velocity_percentile'\n    END                                                       AS trending_reason\n  FROM enriched e\n)\n\nSELECT * FROM scored", "relation_name": "\"contentdb\".\"public_marts\".\"features_content_engagement\""}], "elapsed_time": 1.1447639465332031, "args": {"defer": false, "quiet": false, "partial_parse": true, "log_file_max_bytes": 10485760, "write_json": true, "use_colors_file": true, "print": true, "favor_state": false, "profiles_dir": "/app/services/transform", "log_format": "default", "introspect": true, "strict_mode": false, "enable_legacy_logger": false, "printer_width": 80, "static_parser": true, "invocation_command": "dbt run -s stg_youtube features_content_engagement", "which": "run", "log_format_file": "debug", "use_colors": true, "indirect_selection": "eager", "project_dir": "/app/services/transform", "log_level_file": "debug", "macro_debugging": false, "cache_selected_only": false, "partial_parse_file_diff": true, "show_resource_report": false, "version_check": true, "select": ["stg_youtube", "features_content_engagement"], "send_anonymous_usage_stats": true, "warn_error_options": {"include": [], "exclude": []}, "vars": {}, "log_level": "info", "exclude": [], "log_path": "/app/services/transform/logs", "populate_cache": true}}