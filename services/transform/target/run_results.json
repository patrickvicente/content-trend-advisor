{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.8", "generated_at": "2025-08-13T09:16:20.554513Z", "invocation_id": "15d77f20-1a69-499f-b86d-33e7c77de938", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:19.921872Z", "completed_at": "2025-08-13T09:16:19.928490Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:19.928918Z", "completed_at": "2025-08-13T09:16:20.005193Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08491706848144531, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.content_trend_advisor.stg_youtube", "compiled": true, "compiled_code": "WITH src AS (\n  SELECT \n    external_id AS video_id,\n    fetched_at,\n    payload\n  FROM \"contentdb\".\"public\".\"raw_content\"\n  WHERE source = 'youtube'\n), \n\nclean AS (\n  SELECT\n    video_id,\n\n    /* Titles and descriptions: prefer localized when present */\n    COALESCE(payload->'snippet'->'localized'->>'title', payload->'snippet'->>'title') AS title,\n    LEFT(COALESCE(payload->'snippet'->'localized'->>'description', payload->'snippet'->>'description', ''), 1000) AS description,\n\n    /* Channel and timing info */\n    payload->'snippet'->>'channelId' AS channel_id,\n    payload->'snippet'->>'channelTitle' AS channel_title,\n    (payload->'snippet'->>'publishedAt')::timestamptz AS published_at,\n\n    /* Category and language (note: YouTube uses camelCase keys) */\n    payload->'snippet'->>'categoryId' AS category_id,\n    payload->'snippet'->>'defaultAudioLanguage' AS default_audio_language,\n\n    /* Core metrics from statistics (->> needs quoted keys) */\n    COALESCE((payload->'statistics'->>'viewCount')::bigint, 0) AS view_count,\n    COALESCE((payload->'statistics'->>'likeCount')::bigint, 0) AS like_count,\n    COALESCE((payload->'statistics'->>'commentCount')::bigint, 0) AS comment_count,\n\n    /* Duration as seconds from ISO8601 duration */\n    CASE\n      WHEN payload->'contentDetails'->>'duration' IS NOT NULL\n        THEN \n  (\n    COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[1], '0')::int * 3600\n  + COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[2], '0')::int * 60\n  + COALESCE( (regexp_match((payload->'contentDetails'->>'duration'), 'PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?'))[3], '0')::int\n  )\n\n      ELSE NULL\n    END AS duration_seconds,\n\n    /* Tags, topics, categories */\n    \n  COALESCE(\n    ARRAY(\n      SELECT jsonb_array_elements_text(payload->'snippet'->'tags')\n    ),\n    ARRAY[]::text[]\n  )\n AS tags,\n\n    /* _filter_metadata.detected_topics is an array; use -> (JSONB) not ->> (text) */\n    COALESCE(\n      ARRAY(SELECT jsonb_array_elements_text(payload->'_filter_metadata'->'detected_topics')),\n      ARRAY[]::text[]\n    ) AS detected_topics,\n\n    payload->'_filter_metadata'->>'detected_language' AS detected_language,\n    payload->'_filter_metadata'->>'category_name' AS category_name,\n\n    /* topicDetails.topicCategories is an array of URLs */\n    COALESCE(\n      ARRAY(SELECT jsonb_array_elements_text(payload->'topicDetails'->'topicCategories')),\n      ARRAY[]::text[]\n    ) AS topic_categories,\n\n    /* Derived metrics */\n    \n  CASE\n    WHEN (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric > 0\n      THEN ((COALESCE(COALESCE((payload->'statistics'->>'likeCount')::bigint, 0), 0))::numeric + (COALESCE(COALESCE((payload->'statistics'->>'commentCount')::bigint, 0), 0))::numeric) / (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric\n    ELSE 0::numeric\n  END\n AS engagement_ratio_raw,\n    /* Keep a percentage for readability, but derived from the raw ratio */\n    ROUND((\n      \n  CASE\n    WHEN (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric > 0\n      THEN ((COALESCE(COALESCE((payload->'statistics'->>'likeCount')::bigint, 0), 0))::numeric + (COALESCE(COALESCE((payload->'statistics'->>'commentCount')::bigint, 0), 0))::numeric) / (COALESCE((payload->'statistics'->>'viewCount')::bigint, 0))::numeric\n    ELSE 0::numeric\n  END\n * 100::numeric\n    ), 2) AS engagement_rate,\n    DATE_TRUNC('day', fetched_at) AS fetched_date,\n    EXTRACT(DAY FROM (NOW() - (payload->'snippet'->>'publishedAt')::timestamptz)) AS days_since_published\n\n  FROM src\n)\n\nSELECT * FROM clean", "relation_name": "\"contentdb\".\"public_staging\".\"stg_youtube\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.009152Z", "completed_at": "2025-08-13T09:16:20.012246Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.012914Z", "completed_at": "2025-08-13T09:16:20.042384Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03456735610961914, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.dbt_utils_accepted_range_stg_youtube_engagement_rate__0.70a2155d40", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"contentdb\".\"public_staging\".\"stg_youtube\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not engagement_rate >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.045665Z", "completed_at": "2025-08-13T09:16:20.048437Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.048849Z", "completed_at": "2025-08-13T09:16:20.068531Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02480292320251465, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.dbt_utils_accepted_range_stg_youtube_engagement_ratio_raw__0.677f89f9b6", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"contentdb\".\"public_staging\".\"stg_youtube\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not engagement_ratio_raw >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.070950Z", "completed_at": "2025-08-13T09:16:20.074493Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.074856Z", "completed_at": "2025-08-13T09:16:20.101025Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03163647651672363, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.not_null_stg_youtube_published_at.d60117e757", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect published_at\nfrom \"contentdb\".\"public_staging\".\"stg_youtube\"\nwhere published_at is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.104458Z", "completed_at": "2025-08-13T09:16:20.106904Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.107235Z", "completed_at": "2025-08-13T09:16:20.120193Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01740241050720215, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.not_null_stg_youtube_video_id.b0e4c57c79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect video_id\nfrom \"contentdb\".\"public_staging\".\"stg_youtube\"\nwhere video_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.122935Z", "completed_at": "2025-08-13T09:16:20.125371Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.125733Z", "completed_at": "2025-08-13T09:16:20.142551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021119117736816406, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.not_null_stg_youtube_view_count.f9903099d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect view_count\nfrom \"contentdb\".\"public_staging\".\"stg_youtube\"\nwhere view_count is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.145158Z", "completed_at": "2025-08-13T09:16:20.149029Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.149717Z", "completed_at": "2025-08-13T09:16:20.163732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01995086669921875, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.unique_stg_youtube_video_id.74b61c11d1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    video_id as unique_field,\n    count(*) as n_records\n\nfrom \"contentdb\".\"public_staging\".\"stg_youtube\"\nwhere video_id is not null\ngroup by video_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.167026Z", "completed_at": "2025-08-13T09:16:20.169954Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.170292Z", "completed_at": "2025-08-13T09:16:20.419455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2537810802459717, "adapter_response": {"_message": "SELECT 922", "code": "SELECT", "rows_affected": 922}, "message": "SELECT 922", "failures": null, "unique_id": "model.content_trend_advisor.features_content_engagement", "compiled": true, "compiled_code": "with yt as (\n    select * from \"contentdb\".\"public_staging\".\"stg_youtube\"\n),\n\nlabeled AS (\n  SELECT\n    video_id,\n    title,\n    description,\n    channel_id,\n    channel_title,\n    published_at,\n    category_id,\n    default_audio_language,\n    tags,\n    topic_categories,\n    detected_topics,\n    detected_language,\n    category_name,\n    view_count,\n    like_count,\n    comment_count,\n    engagement_rate,\n    engagement_ratio_raw,\n    duration_seconds,\n    days_since_published,\n\n    /* Simple feature engineering */\n    char_length(title)                                        AS title_len,\n    CASE WHEN title ~ '\\d' THEN true ELSE false END           AS title_has_numbers,\n    EXTRACT(HOUR FROM published_at)                           AS hour_of_day,\n    EXTRACT(DOW FROM published_at)                            AS day_of_week,\n\n    CASE\n      WHEN duration_seconds IS NULL THEN 'unknown'\n      WHEN duration_seconds < 60 THEN 'short'\n      WHEN duration_seconds < 300 THEN 'medium'\n      WHEN duration_seconds < 900 THEN 'long'\n      ELSE 'very_long'\n    END                                                       AS content_length_bucket,\n\n    CASE\n      WHEN engagement_rate >= 10 THEN 'high'\n      WHEN engagement_rate >= 5 THEN 'medium'\n      WHEN engagement_rate >= 1 THEN 'low'\n      ELSE 'very_low'\n    END                                                       AS engagement_tier,\n\n    /* Trending heuristic: fresh and non-trivial views */\n    CASE\n      WHEN days_since_published <= 7 AND view_count > 1000 THEN true\n      ELSE false\n    END                                                       AS is_trending\n\n  FROM yt\n)\n\nSELECT * FROM labeled", "relation_name": "\"contentdb\".\"public_marts\".\"features_content_engagement\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.423057Z", "completed_at": "2025-08-13T09:16:20.429280Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.429690Z", "completed_at": "2025-08-13T09:16:20.443968Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02243804931640625, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.accepted_values_features_content_engagement_engagement_tier__high__medium__low__very_low.afc7cef341", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_tier as value_field,\n        count(*) as n_records\n\n    from \"contentdb\".\"public_marts\".\"features_content_engagement\"\n    group by engagement_tier\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'high','medium','low','very_low'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.452004Z", "completed_at": "2025-08-13T09:16:20.471699Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.472524Z", "completed_at": "2025-08-13T09:16:20.494993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.045598506927490234, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.not_null_features_content_engagement_is_trending.880e83454a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_trending\nfrom \"contentdb\".\"public_marts\".\"features_content_engagement\"\nwhere is_trending is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.498923Z", "completed_at": "2025-08-13T09:16:20.502066Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.502430Z", "completed_at": "2025-08-13T09:16:20.517526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021086931228637695, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.not_null_features_content_engagement_video_id.129bf48ab7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect video_id\nfrom \"contentdb\".\"public_marts\".\"features_content_engagement\"\nwhere video_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-08-13T09:16:20.522701Z", "completed_at": "2025-08-13T09:16:20.525899Z"}, {"name": "execute", "started_at": "2025-08-13T09:16:20.526282Z", "completed_at": "2025-08-13T09:16:20.539629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01845574378967285, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.content_trend_advisor.unique_features_content_engagement_video_id.cd56a0c221", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    video_id as unique_field,\n    count(*) as n_records\n\nfrom \"contentdb\".\"public_marts\".\"features_content_engagement\"\nwhere video_id is not null\ngroup by video_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 0.7903714179992676, "args": {"resource_types": [], "enable_legacy_logger": false, "introspect": true, "log_format_file": "debug", "quiet": false, "log_format": "default", "defer": false, "which": "build", "invocation_command": "dbt build --select stg_youtube+", "show_resource_report": false, "exclude": [], "printer_width": 80, "cache_selected_only": false, "favor_state": false, "send_anonymous_usage_stats": true, "static_parser": true, "include_saved_query": false, "log_path": "/app/services/transform/logs", "show": false, "log_level_file": "debug", "profiles_dir": "/app/services/transform", "indirect_selection": "eager", "strict_mode": false, "print": true, "macro_debugging": false, "log_level": "info", "vars": {}, "partial_parse_file_diff": true, "use_colors_file": true, "version_check": true, "partial_parse": true, "write_json": true, "log_file_max_bytes": 10485760, "project_dir": "/app/services/transform", "select": ["stg_youtube+"], "warn_error_options": {"include": [], "exclude": []}, "populate_cache": true, "use_colors": true}}